/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
int timer0_counter = 0;
int timer0_flag = 0;
int TIMER_CYCLE = 10;
const int MAX_SIZE = 4;
int index_led = 0;
int led_buffer[4] = {1,2,3,4};
const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0b00110000,0b01111000,0b11001100,0b11001100,0b11111100,0b11001100,0b11001100,0b00000000};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
void display7SEG(int num);
void update7SEG(int index);
void updateLEDMatrix(int index);
void updateClockBuffer(int hour, int minute);
void setTimer0(int duration);
void timer_run();
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */
  int hour = 15, minute = 8, second = 50;
  int counter = 25;
  int counter_LED = 100;
  int counter_LED_Matrix = 20;
  int status = 0;
  int matrix_status = 0;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(10);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(timer0_flag == 1){
		  counter--;
		  counter_LED--;
		  counter_LED_Matrix--;
		  if(counter_LED <= 0){
			  counter_LED = 100;
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
			  second++;
			  if(second >= 60){
				  second = 0;
				  minute++;
			  }
			  if(minute >= 60){
				  minute = 0;
				  hour++;
			  }
			  if(hour >= 24){
				  hour = 0;
			  }
			  updateClockBuffer(hour, minute);
		  }

		  if(counter <= 0){
			  counter = 25;
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, SET);
			  if(status > 3) status = 0;
			  update7SEG(status);
			  status++;
		  }
		  if(counter_LED_Matrix <= 0){
			  counter = 20;
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11|
					  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, SET);
			if(matrix_status > 7) matrix_status = 0;
			updateLEDMatrix(matrix_status);
			matrix_status++;
		  }

		  setTimer0(10);
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	timer_run();
}

uint8_t LED[10] = {0x3F,		//decode for 0
				0x06, 			//decode for 1
				0x5B, 			//decode for 2
				0x4F, 			//decode for 3
				0x66, 			//decode for 4
				0x6D, 			//decode for 5
				0x7D, 			//decode for 6
				0x07, 			//decode for 7
				0x7F, 			//decode for 8
				0x6F};			//decode for 9

void display7SEG(int num){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, !((LED[num]>>0)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, !((LED[num]>>1)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, !((LED[num]>>2)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, !((LED[num]>>3)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, !((LED[num]>>4)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, !((LED[num]>>5)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, !((LED[num]>>6)&0x01));
}


void update7SEG(int index){
	switch(index){
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
		display7SEG(led_buffer[0]);
		break;
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
		display7SEG(led_buffer[1]);
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		display7SEG(led_buffer[2]);
		break;
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
		display7SEG(led_buffer[3]);
		break;
	}
}

void updateClockBuffer(int hour, int minute){
	led_buffer[0] = hour/10;
	led_buffer[1] = hour%10;
	led_buffer[2] = minute/10;
	led_buffer[3] = minute%10;
}
//matrix_buffer
void setTimer0(int duration){
	timer0_counter = duration / TIMER_CYCLE;
	timer0_flag = 0;
}
void timer_run(){
	if(timer0_counter > 0){
		timer0_counter--;
		if(timer0_counter == 0) timer0_flag = 1;
	}
}

void displayLEDMatrix(int col){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, !((col>>0)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, !((col>>1)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, !((col>>2)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, !((col>>3)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, !((col>>4)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, !((col>>5)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, !((col>>6)&0x01));
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, !((col>>7)&0x01));
}

void updateLEDMatrix(int index){
	switch(index){
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
		displayLEDMatrix(matrix_buffer[0]);
		break;
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
		displayLEDMatrix(matrix_buffer[1]);
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
		displayLEDMatrix(matrix_buffer[2]);
		break;
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
		displayLEDMatrix(matrix_buffer[3]);
		break;
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
		displayLEDMatrix(matrix_buffer[4]);
		break;
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
		displayLEDMatrix(matrix_buffer[5]);
		break;
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
		displayLEDMatrix(matrix_buffer[6]);
		break;
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
		displayLEDMatrix(matrix_buffer[7]);
		break;
	default:
		break;
	}
};

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
